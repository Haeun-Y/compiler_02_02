과제2 내용 설명

* 회의록 올리기

* 과제에서 파일을 어떻게 나누어야 하는지, 각각 파일마다 입출력이 어떻게 되어야하는지 설명
 - main.c, scanner.l, symtable.c, tn.h, reporterror.c
 - 가장 먼저 실행되는 것 메인함수 -> 입력으로 파일이 들어옴,  main 에서는 yylex()를 호출, 
lex를 통해 토큰으로 변경해서 결과를  main에서 출력해야함. 
- 주석인 경우 주석이라고 출력만 해주면 됨
-  identifier 는 심볼테이블에 넣고 에러가 있는지 없는지 확인해야함 
- rule 에서 액션은 c코드를 작성할 수 있음 룰에서 심볼테이블에 집어넣는 함수를 호출해주면 됨
- 과제1에서는 
- 오류가 있을 경우, 직접 따질 필요가 없음. 아이덴티파이어 룰에 안맞으면 오류가 되는 것임. reporterror를
스캐너에서 바로 부를 수 있음, 룰 외에는 에러처리가 되도록하면 됨. 레포트에러에 있는 에러처리함수를 
사용하면 됨. 에러처리는 기본 과제 1과 동일, 심볼테이블 관리도 과제1과 동일
- 과제 2에서 볼 것은 스캐너파일과 전체적인 흐름을 보는 것
- glob.h는 main쪽에 잇어도 되고 tn.h에 대해 있어도 되고 심볼테이블에서 글로벌 변수들이 많았음
여러 파일에서 같은 값에 접근하려면 헤더를 만들어 놓고 헤더 인클루드하면 됨 
- 주석, 아이덴티파이어, 상수, 키워드, 연산자, 스페셜심볼, 화이트 스페이스, 각각에 대해 토큰 
타입 처리해주면 됨, 스페셜 심볼이나 화이트스페이스에 거기에 맞는 액션 취해주면 됨


TEOF

TERROR
TCOMMENT
TNUMBER
TIDENT

예약어
TCONST
TELSE
TIF
TINT
TRETURN
TVOID
TWHILE

연산자
TADD : +
TSUB : -
TMUL : *
TDIV : /
TMOD : %  

배정 연산자
TASSIGN : =
TADDASSIGN : +=
TSUBASSIGN : -=
TMULASSIGN : *=
TDIVASSIGN : /=
TMODASSIGN : %=

논리 연산자
TNOT : !
TAND : &&
TOR : ||

관계 연산자
TEQUAL : ==
TNOTEQU : !=
TLESS : <
TLESSE : <=
TGREAT : >
TGREATE : >=

증감연산자
TINC : ++
TDEC : --

"("				return(TLPAREN);
")"				return(TRPAREN);
","				return(TCOMMA);
"{"				return(TLBRACE);
"}"				return(TRBRACE);
"["				return(TLBRACKET);
"]"				return(TRBRACKET);
";"				return(TSEMI);